// <auto-generated />
using System;
using DapperDino.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DapperDino.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190822034215_application-form-status-and-texts-template")]
    partial class applicationformstatusandtextstemplate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DapperDino.DAL.Models.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DiscordUserId");

                    b.Property<string>("Explanation")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<DateTime>("LastChanged");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Links");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<Guid>("DiscordRegistrationCode");

                    b.Property<int?>("DiscordUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<bool>("RegisteredDiscordAccount");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("WebsiteApiToken");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordAttachmentId");

                    b.Property<int>("DiscordMessageId");

                    b.Property<string>("FileName");

                    b.Property<int>("FileSize");

                    b.Property<int>("Height");

                    b.Property<string>("ProxyUrl");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.ToTable("DiscordAttachment");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("B");

                    b.Property<int>("DiscordEmbedId");

                    b.Property<byte>("G");

                    b.Property<byte>("R");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordColors");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DiscordMessageId");

                    b.Property<DateTimeOffset?>("Timestamp");

                    b.Property<string>("Title");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.ToTable("DiscordEmbeds");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<string>("IconUrl");

                    b.Property<string>("Name");

                    b.Property<string>("ProxyIconUrl");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedAuthors");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmbedId");

                    b.Property<bool>("Inline");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("EmbedId");

                    b.ToTable("DiscordEmbedFields");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedFooter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<string>("IconUrl");

                    b.Property<string>("ProxyIconUrl");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedFooters");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<int>("Height");

                    b.Property<string>("ProxyUrl");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedImages");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedProviders");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedThumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<int>("Height");

                    b.Property<string>("ProxyUrl");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedThumbnails");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordEmbedId");

                    b.Property<int>("Height");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("Id");

                    b.HasIndex("DiscordEmbedId")
                        .IsUnique();

                    b.ToTable("DiscordEmbedVideos");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChannelId");

                    b.Property<int>("DiscordUserId");

                    b.Property<string>("GuildId");

                    b.Property<string>("ImageLink");

                    b.Property<bool>("IsDm");

                    b.Property<bool>("IsEmbed");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("MessageId")
                        .IsRequired();

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("DiscordMessages");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordId");

                    b.Property<string>("Discriminator");

                    b.Property<bool>("IsBot");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("Username");

                    b.Property<int>("Xp");

                    b.HasKey("Id");

                    b.ToTable("DiscordUsers");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordUserProficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordUserId");

                    b.Property<int>("ProficiencyId");

                    b.Property<int>("ProficiencyLevel");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("ProficiencyId");

                    b.ToTable("DiscordUserProficiencies");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.ArchitectForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("DevelopmentExperience");

                    b.Property<int>("DiscordId");

                    b.Property<string>("Motivation");

                    b.Property<string>("PreviousIdeas");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId");

                    b.ToTable("ArchitectForms");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.ArchitectForm>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordMessageId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FormId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("FormId");

                    b.ToTable("FormReply<ArchitectForm>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormReply<ArchitectForm>");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.RecruiterForm>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordMessageId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FormId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("FormId");

                    b.ToTable("FormReply<RecruiterForm>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormReply<RecruiterForm>");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.TeacherForm>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordMessageId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("FormId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("FormId");

                    b.ToTable("FormReply<TeacherForm>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormReply<TeacherForm>");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.RecruiterForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("DevelopmentExperience");

                    b.Property<string>("DevelopmentReviewingExperience");

                    b.Property<int>("DiscordId");

                    b.Property<string>("GithubLink");

                    b.Property<string>("Motivation");

                    b.Property<string>("ProjectLinks");

                    b.Property<string>("RecruitingExperience");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId");

                    b.ToTable("RecruiterForms");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.TeacherForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("DevelopmentExperience");

                    b.Property<int>("DiscordId");

                    b.Property<string>("GithubLink");

                    b.Property<string>("Motivation");

                    b.Property<string>("ProjectLinks");

                    b.Property<int>("Status");

                    b.Property<string>("TeachingExperience");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId");

                    b.ToTable("TeacherForms");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<string>("Description");

                    b.Property<int?>("DiscordMessageId");

                    b.Property<string>("Question");

                    b.Property<int?>("ResourceLinkId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("ResourceLinkId");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.HostingEnquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordId")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("PackageType");

                    b.HasKey("Id");

                    b.ToTable("HostingEnquiries");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("MolliePaymentId");

                    b.Property<DateTime>("SendDate");

                    b.Property<int>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int?>("ProductInstructionsId");

                    b.Property<double>("SalePercentage");

                    b.Property<string>("ShortDescription");

                    b.HasKey("Id");

                    b.HasIndex("ProductInstructionsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int?>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAmounts");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductEdition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("ExtraInfo");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductEditions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductEnquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordId")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("PType");

                    b.HasKey("Id");

                    b.ToTable("ProductEnquiries");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsHeaderImage");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductInstructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("ProductInstructions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductProductCategory", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ProductCategoryId");

                    b.HasKey("ProductId", "ProductCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductProductCategory");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductProductEdition", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ProductEditionId");

                    b.HasKey("ProductId", "ProductEditionId");

                    b.HasIndex("ProductEditionId");

                    b.ToTable("ProductProductEditions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Proficiency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("ProficiencyType");

                    b.HasKey("Id");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ResourceLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Link");

                    b.HasKey("Id");

                    b.ToTable("ResourceLinks");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int?>("DiscordUserId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.SuggestionReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordMessageId");

                    b.Property<int>("FromId");

                    b.Property<int>("SuggestionId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("SuggestionId");

                    b.ToTable("SuggestionReaction");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Texts.TextTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<int>("Environment");

                    b.HasKey("Id");

                    b.ToTable("TextTemplates");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Texts.TextTemplateKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key");

                    b.Property<int>("TextId");

                    b.HasKey("Id");

                    b.HasIndex("TextId");

                    b.ToTable("TextTemplateKeys");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<int>("Category");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("FrameworkId");

                    b.Property<int?>("LanguageId");

                    b.Property<DateTime>("LastModified");

                    b.Property<int>("Priority");

                    b.Property<int>("Status");

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FrameworkId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.TicketReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscordMessageId");

                    b.Property<int>("FromId");

                    b.Property<int>("TicketId");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketReactions");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.TicketUser", b =>
                {
                    b.Property<int>("TicketId");

                    b.Property<int>("DiscordUserId");

                    b.HasKey("TicketId", "DiscordUserId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("TicketUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.ArchitectFormReply", b =>
                {
                    b.HasBaseType("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.ArchitectForm>");


                    b.ToTable("ArchitectFormReply");

                    b.HasDiscriminator().HasValue("ArchitectFormReply");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.RecruiterFormReply", b =>
                {
                    b.HasBaseType("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.RecruiterForm>");


                    b.ToTable("RecruiterFormReply");

                    b.HasDiscriminator().HasValue("RecruiterFormReply");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.TeacherFormReply", b =>
                {
                    b.HasBaseType("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.TeacherForm>");


                    b.ToTable("TeacherFormReply");

                    b.HasDiscriminator().HasValue("TeacherFormReply");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Applicant", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ApplicationUser", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordAttachment", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany("Attachments")
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordColor", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Color")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordColor", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbed", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany("Embeds")
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedAuthor", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Author")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedAuthor", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedField", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "Embed")
                        .WithMany("Fields")
                        .HasForeignKey("EmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedFooter", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Footer")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedFooter", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedImage", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Image")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedImage", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedProvider", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Provider")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedProvider", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedThumbnail", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Thumbnail")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedThumbnail", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordEmbedVideo", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordEmbed", "DiscordEmbed")
                        .WithOne("Video")
                        .HasForeignKey("DapperDino.DAL.Models.DiscordEmbedVideo", "DiscordEmbedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordMessage", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.DiscordUserProficiency", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany("Proficiencies")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.ArchitectForm", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.ArchitectForm>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Forms.ArchitectForm", "Form")
                        .WithMany("Replies")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.RecruiterForm>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Forms.RecruiterForm", "Form")
                        .WithMany("Replies")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.FormReply<DapperDino.DAL.Models.Forms.TeacherForm>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Forms.TeacherForm", "Form")
                        .WithMany("Replies")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.RecruiterForm", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Forms.TeacherForm", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.FrequentlyAskedQuestion", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId");

                    b.HasOne("DapperDino.DAL.Models.ResourceLink", "ResourceLink")
                        .WithMany()
                        .HasForeignKey("ResourceLinkId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Order", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Product", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ProductInstructions", "Instructions")
                        .WithMany()
                        .HasForeignKey("ProductInstructionsId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductAmount", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.Order")
                        .WithMany("ProductAmounts")
                        .HasForeignKey("OrderId");

                    b.HasOne("DapperDino.DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductCategory", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ProductCategory", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductEdition", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductImage", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductProductCategory", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ProductCategory", "ProductCategory")
                        .WithMany("Categories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.ProductProductEdition", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ProductEdition", "ProductEdition")
                        .WithMany("Group")
                        .HasForeignKey("ProductEditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Product", "Product")
                        .WithMany("Editions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Suggestion", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany()
                        .HasForeignKey("DiscordUserId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.SuggestionReaction", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Suggestion", "Suggestion")
                        .WithMany("Reactions")
                        .HasForeignKey("SuggestionId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Texts.TextTemplateKeys", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.Texts.TextTemplate", "Text")
                        .WithMany("Keys")
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DapperDino.DAL.Models.Ticket", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Proficiency", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkId");

                    b.HasOne("DapperDino.DAL.Models.Proficiency", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.TicketReaction", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordMessage", "DiscordMessage")
                        .WithMany()
                        .HasForeignKey("DiscordMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Ticket", "Ticket")
                        .WithMany("Reactions")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("DapperDino.DAL.Models.TicketUser", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.DiscordUser", "DiscordUser")
                        .WithMany("TicketUsers")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.Ticket", "Ticket")
                        .WithMany("Assignees")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DapperDino.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DapperDino.DAL.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
